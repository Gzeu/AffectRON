version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: affectron
      POSTGRES_USER: affectron
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-affectron_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U affectron -d affectron"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - affectron_network

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - affectron_network

  # Main API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://affectron:${POSTGRES_PASSWORD:-affectron_password_2024}@postgres:5432/affectron
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./models:/app/models:ro
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - affectron_network

  # Celery Worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://affectron:${POSTGRES_PASSWORD:-affectron_password_2024}@postgres:5432/affectron
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./models:/app/models:ro
    command: celery -A src.workers.celery_app worker --loglevel=info --concurrency=2
    restart: unless-stopped
    networks:
      - affectron_network

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://affectron:${POSTGRES_PASSWORD:-affectron_password_2024}@postgres:5432/affectron
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
    command: celery -A src.workers.celery_app beat --loglevel=info --schedule=/app/celerybeat-schedule
    restart: unless-stopped
    networks:
      - affectron_network

  # Dashboard Frontend
  dashboard:
    build:
      context: src/dashboard
      dockerfile: Dockerfile
    ports:
      - "${DASHBOARD_PORT:-3000}:80"
    depends_on:
      - api
    environment:
      - REACT_APP_API_URL=http://localhost:${API_PORT:-8000}
    restart: unless-stopped
    networks:
      - affectron_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - ./src/dashboard/build:/usr/share/nginx/html:ro
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    networks:
      - affectron_network
    profiles:
      - production

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - affectron_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_password}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - affectron_network

  # ELK Stack for logging (Optional)
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - affectron_network
    profiles:
      - logging

  logstash:
    image: logstash:8.11.0
    volumes:
      - ./infrastructure/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - affectron_network
    profiles:
      - logging

  kibana:
    image: kibana:8.11.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - affectron_network
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  affectron_network:
    driver: bridge